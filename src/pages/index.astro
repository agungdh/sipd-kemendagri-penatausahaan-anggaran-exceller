---
import "bootstrap/dist/css/bootstrap.css";
---

<!doctype html>
<html lang="en">
  <head>
    <!-- Required meta tags -->
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />

    <title>Hello, world!</title>
  </head>
  <body>
    <div class="container">
      <div class="row">
        <div class="col-12">
          <div class="mb-3">
            <label for="json" class="form-label">JSON Data</label>
            <textarea
              class="form-control"
              id="json"
              rows="15"
              style="resize: none;"></textarea>
          </div>
          <button id="btnExcel" class="btn btn-primary">To Excel</button>
        </div>
      </div>
    </div>
    <script>
        import Excel from 'exceljs';
        import FileSaver from 'file-saver'

        var letters = (function() {
            
            // object to expose as public properties and methods such as clock.now
            type Org = {[key: string] : any}
            var pub: Org = {};
            var letterArray = [];
            
            //letters.increment('a')
            pub.increment = function (c) {
                letterArray = c.split("");
                
                if(isLetters(letterArray)){
                    return(next(c));
                } else {
                    throw new Error('Letters Only');
                }                
            };
            
            function isLetters(arr) {
                for (var i = 0; i < arr.length; i++) {
                    if(arr[i].toLowerCase() != arr[i].toUpperCase()){
                    } else {
                        return false;
                    }
                }
                return true;
            }            
            
            function next(c) {
                var u = c.toUpperCase();
                if (same(u,'Z')){
                    var txt = '';
                    var i = u.length;
                    while (i--) {
                        txt += 'A';
                    }
                    return (txt+'A');
                } else {
                    var p = "";
                    var q = "";
                    if(u.length > 1){
                        p = u.substring(0, u.length - 1);
                        q = String.fromCharCode(p.slice(-1).charCodeAt(0));
                    }
                    var l = u.slice(-1).charCodeAt(0);
                    var z = nextLetter(l);
                    if(z==='A'){
                        return p.slice(0,-1) + nextLetter(q.slice(-1).charCodeAt(0)) + z;
                    } else {
                        return p + z;
                    }
                }
            }
            
            function nextLetter(l){
                if(l<90){
                    return String.fromCharCode(l + 1);
                }
                else{
                    return 'A';
                }
            }
            
            function same(str,char){
                var i = str.length;
                while (i--) {
                    if (str[i]!==char){
                        return false;
                    }
                }
                return true;
            }
            
            //API
            return pub;
        }());
        
      document
        .getElementById("btnExcel")
        ?.addEventListener("click", () =>
          toExcel((document.getElementById("json") as HTMLInputElement)?.value)
        );

      async function toExcel(json) {
        try {
          let datas = JSON.parse(json);

          const workbook = new Excel.Workbook();

          rawDataSheet(workbook, datas)
          persentasePerSkpdSheet(workbook, datas)

          workbook.views = [
            {
                x: 0, y: 0, width: 10000, height: 20000,
                firstSheet: 0, activeTab: 1, visibility: 'visible'
            }
            ]

          //  Download File
          const buffer = await workbook.xlsx.writeBuffer();
          let rawTimestamp = new Date()
          let timestamp = `${String(rawTimestamp.getDate()).padStart(2, "0")}${String(rawTimestamp.getMonth()+1).padStart(2, "0")}${rawTimestamp.getFullYear()} ${rawTimestamp.getHours()}${rawTimestamp.getMinutes()}${rawTimestamp.getSeconds()}`
          FileSaver.saveAs(new Blob([buffer]), `Persentase Belanja SKPD ${timestamp}.xlsx`);
        } catch (error) {
          console.error(error);
          alert(error.message);
        }

      }

      function rawDataSheet(workbook, datas) {
        const sheet = workbook.addWorksheet('RAW DATA');

        // Fill Header
        const element = datas[0];
        let cellI = 1;
        let cellA = 'A';

        for (const key in element) {
        const cell = sheet.getCell(`${cellA}${cellI}`);
        cell.value = key

        cellA = letters.increment(cellA.toUpperCase())
        }

        //  Fill Data
        cellI = 2;
        for (let i = 0; i < datas.length; i++) {
            const element = datas[i];
            let cellA = 'A';
            
            for (const key in element) {

            const cell = sheet.getCell(`${cellA}${cellI}`);
            cell.value = element[key]
            
            cellA = letters.increment(cellA.toUpperCase())
            }

            cellI++
        }
      }

      function persentasePerSkpdSheet(workbook, datas) {
        const sheet = workbook.addWorksheet('Persentase Per SKPD');

        //  Fill Header
        sheet.getCell(`A1`).value = 'No';
        sheet.getCell(`B1`).value = 'SKPD';
        sheet.getCell(`C1`).value = 'Persentase';

        //  Fill Data
        let cellI = 2;
        for (let i = 0; i < datas.length; i++) {
            const element = datas[i];
            
            sheet.getCell(`A${cellI}`).value = i + 1
            sheet.getCell(`B${cellI}`).value = element.nama_skpd;
            sheet.getCell(`C${cellI}`).value = (element.nilai_rak / element.nilai) * 100;
            
            cellI++
        }
      }
    </script>
  </body>
</html>
